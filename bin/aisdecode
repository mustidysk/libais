#! /usr/bin/env python

import ais
import sys
import ais.compatibility.gpsd
import ais.stream

try:
    import json
except:
    json = None
try:
    import msgpack
except:
    msgpack = None

args = {"encoding": "json"}
files = []
for arg in sys.argv[1:]:
    if arg.startswith("--"):
        arg = arg[2:]
        if '=' in arg:
            arg, value = arg.split("=", 1)
            args[arg] = value
        else:
            args[arg] = True
    else:
        files.append(arg)

if "help" in args:
    print """Usage: aisdecode [OPTIONS] < INFILE.nmea > OUTFILE.json
Available opptions:
    --gpsd Use gpsd compatible output
        --copy-tagblock-timestamp=False

    --encoding=msgpack Use msgpack encoding
    --encoding=json Use json encoding (default)

    --verbose
    --allowUnknown
    --treatABequal
    --pass_invalid_checksums
    --allow_missing_timestamps

    --uscg=False
    --validateChecksum=False
"""
    sys.exit(0)

encoding = args.pop('encoding', 'json')
if encoding == 'json':
    def write(msg):
        json.dump(msg, sys.stdout)
        sys.stdout.write("\n")

if encoding == 'msgpack':
    def write(msg):
        msgpack.pack(msg, sys.stdout)

use_gpsd = args.pop("gpsd", False)
copy_tagblock_timestamp = args.pop("copy-tagblock-timestamp", True)


for key in ("uscg", "validateChecksum", "verbose", "allowUnknown", "treatABequal", "pass_invalid_checksums", "allow_missing_timestamps"):
    if key in args and isinstance(args[key], str):
        args[key] = args[key] == True
if 'window' in args:
    args['window'] = int('window')

gpsd_mangle = ais.compatibility.gpsd.Mangler(copy_tagblock_timestamp=copy_tagblock_timestamp)

for msg in ais.stream.decode(sys.stdin, **args):
    if use_gpsd:
        msg = gpsd_mangle(msg)
    write(msg)
